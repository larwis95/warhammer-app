package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"api/graph/model"
	"context"
	"fmt"
)

// MinWoundsSuffered is the resolver for the minWoundsSuffered field.
func (r *damageTableResolver) MinWoundsSuffered(ctx context.Context, obj *model.DamageTable) (*int, error) {
	panic(fmt.Errorf("not implemented: MinWoundsSuffered - minWoundsSuffered"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Allegiances is the resolver for the allegiances field.
func (r *queryResolver) Allegiances(ctx context.Context, filter *model.AllegianceFilters) ([]*model.Allegiance, error) {
	panic(fmt.Errorf("not implemented: Allegiances - allegiances"))
}

// GrandAlliances is the resolver for the grandAlliances field.
func (r *queryResolver) GrandAlliances(ctx context.Context) ([]*model.GrandAlliance, error) {
	panic(fmt.Errorf("not implemented: GrandAlliances - grandAlliances"))
}

// Units is the resolver for the units field.
func (r *queryResolver) Units(ctx context.Context, filter *model.UnitFilters) ([]*model.Unit, error) {
	panic(fmt.Errorf("not implemented: Units - units"))
}

// Warscrolls is the resolver for the warscrolls field.
func (r *queryResolver) Warscrolls(ctx context.Context, filter *model.WarscrollFilters) ([]*model.Warscroll, error) {
	panic(fmt.Errorf("not implemented: Warscrolls - warscrolls"))
}

// DamageTable returns DamageTableResolver implementation.
func (r *Resolver) DamageTable() DamageTableResolver { return &damageTableResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type damageTableResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
